version: 2.1
  
executors:
  base-executor:
    docker:
      - image: cimg/base:2023.05
    working_directory: /tmp/workspace

jobs:
  vendor_artifacts:
    docker:
      - image: cimg/python:3.11.3
    steps:
      - checkout
      - run: python --version
      - attach_workspace:
          at: src/bert
      - run:
          name: Install Python dependencies
          command: |
            python3 -m pip install --upgrade pip
            pip download torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu  -d vendor
            pip download -r src/bert/requirements.txt -d vendor
      - run:
          name: Copy vendor folder
          command: |
            mkdir -p /tmp/artifacts/local
            cp -r vendor /tmp/artifacts/local/vendor
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts/local
          paths:
            - vendor

  build_bert_model:
    # resource_class: small # specify a resource class
    executor: base-executor
    steps:
      - checkout  
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            export DOCKER_BUILDKIT=1
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            docker build --target final -t ghcr.io/kcirtapfromspace/cloudfoundry_circleci:$TAG -t ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest .
            echo $GITHUB_PAT | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
            docker push ghcr.io/kcirtapfromspace/cloudfoundry_circleci:$TAG 
      - run:
          name: Copy vendor folder from Docker image
          command: |
            export DOCKER_BUILDKIT=1
            mkdir -p /tmp/artifacts/docker
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            docker build --target artifact_build -t artifact_build_image:$TAG .
            docker create --name temp-vendor artifact_build_image:$TAG
            docker cp temp-vendor:/vendor /tmp/artifacts/docker/vendor
          # docker rm temp-container

          # mkdir -p /tmp/artifacts/buildpack
          # docker build --target buildpack -t buildpack:$TAG .
          # docker create --name temp-buildpack buildpack:$TAG
          # docker cp temp-buildpack:/artifacts /tmp/artifacts/buildpack/
          # docker rm temp-buildpack

      - store_artifacts:
          path: /tmp/artifacts/docker
      - persist_to_workspace:
          root: /tmp/artifacts/docker
          paths:
            - vendor
      - run:
          name: Run Buildpack locally
          command: |
            cd src/bert
            cp -r /tmp/artifacts/docker/vendor .
            ls -la
            docker run --rm \
            -v $PWD:/workspace -w / workspace\
            --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
            buildpacksio/pack:latest build bert-base \
              --builder paketobuildpacks/builder:base \
              --buildpack paketo-buildpacks/python
              --volume /workspace:/workspace:ro
              --verbose

  list_container_vulnerabilities:
    executor: base-executor
    steps:
      - run:
          command: |
            mkdir -p /tmp/artifacts/scans
      - run:
          name: Syft Docker image
          environment:
            SYFT_VERSION: v0.80.0
            IMAGE_NAME: ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest
            OUTPUT_FORMAT: json
            OUTPUT_FILE: /tmp/artifacts/syft_sbom.json
          command: |
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b . "$SYFT_VERSION"
            echo $GITHUB_PAT | ./syft login ghcr.io -u $GITHUB_USERNAME --password-stdin  -vv
            ./syft packages "$IMAGE_NAME" -vv --scope AllLayers -o "$OUTPUT_FORMAT" > "${OUTPUT_FILE}" 
            echo "scan results saved in $OUTPUT_FILE"
          # echo $GITHUB_PAT | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
      - run:
          name: Grype Docker image
          environment:
            GRYPE_VERSION: v0.61.1
            OUTPUT_FORMAT: sarif
            OUTPUT_FILE: /tmp/artifacts/grype.json
          command: |
            curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b . "$GRYPE_VERSION"
            ./grype sbom:/tmp/artifacts/syft_sbom.json --vv
            echo "scan results saved in $OUTPUT_FILE"
      # - run:
      #     name: Grype Scan SBOM
      #     environment:
      #       GRYPE_VERSION: v0.61.1
      #       IMAGE_NAME: ghcr.io/kcirtapfromspace/cloudfoundry_circleci:0.1.${CIRCLE_BUILD_NUM}
      #       OUTPUT_FORMAT: sarif
      #       OUTPUT_FILE: /tmp/artifacts/grype.json

      #     command: |
      #       curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b . "$GRYPE_VERSION"
      #       ./grype "$IMAGE_NAME"  --scope AllLayers --only-fixed --by-cve --output sarif-o "$OUTPUT_FORMAT" > "${OUTPUT_FILE}"  --debug 
      #       echo "scan results saved in $OUTPUT_FILE"
      - store_artifacts:
          path: /tmp/artifacts/scans

      # - grype/scan-image:
      #     image-name: ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest # grype will pull this image from docker.io, by default, check the scan-image command for more options 
      #     registry-address: ghcr.io
      #     fail-on-severity: high
      #     registry-user: $GITHUB_USERNAME
      #     registry-pass: $GITHUB_PAT

  docker_deploy_cloud_foundry:
    executor: base-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: 
          name: tag build image as latest
          command: |
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            docker tag ghcr.io/kcirtapfromspace/cloudfoundry_circleci:$TAG ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest
      - run:
          name: Install Cloud Foundry
          command: |
            # ...first add the Cloud Foundry Foundation public key and package repository to your system
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            # ...then, update your local package index, then finally install the cf CLI
            sudo apt-get update
            sudo apt-get install cf8-cli
      - run:
          name: Login to Cloud Foundry
          command: |
            cf login -a $CF_API -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s $CF_SPACE
      - run:
          name: Docker Deploy to Cloud Foundry
          command: |
            CF_DOCKER_PASSWORD=$GITHUB_PAT cf push Python_Bert \
              -k 7G \
              -m 5G \
              --docker-image ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest \
              --docker-username $GITHUB_USERNAME \
              --no-route \
              --no-start 

  vendor_deploy_cloud_foundry:
    executor: base-executor
    steps:
      - checkout
      - run:
          name: Install Cloud Foundry
          command: |
            # ...first add the Cloud Foundry Foundation public key and package repository to your system
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            # ...then, update your local package index, then finally install the cf CLI
            sudo apt-get update
            sudo apt-get install cf8-cli
      - run:
          name: Login to Cloud Foundry
          command: |
            cf login -a $CF_API -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s $CF_SPACE
      - run:
          name: Deploy to Cloud Foundry
          command: |
            pwd
            ls -lAhRd /tmp
            cp -r /tmp/artifacts/local/vendor ./vendor 
            cd src/bert
            cf push vendor_bert \
              -k 4G \
              -m 3G \
              -c "python server.py" 

# Cron job to run every night at UTC (1am EST)\
  # cron_task:
  #   executor: base-executor
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         docker_layer_caching: true
  #     - run:
  #         name: Install Cloud Foundry
  #         command: |
  #           # ...first add the Cloud Foundry Foundation public key and package repository to your system
  #           wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
  #           echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
  #           # ...then, update your local package index, then finally install the cf CLI
  #           sudo apt-get update
  #           sudo apt-get install cf8-cli
  #     - run:
  #         name: Login to Cloud Foundry
  #         command: |
  #           cf login -a $CF_API -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s $CF_SPACE
  #     - run:
  #         name: Deploy to Cloud Foundry
  #         command: |
  #           cf run-task Python_Bert --start-command "python3 cleaned_bert_similarity.py"

      

workflows:

  build_test_and_deploy:
    jobs:
      - vendor_artifacts
      - build_bert_model
      - list_container_vulnerabilities:
          requires:
            - build_bert_model
          filters:
            branches:
              only: main
      - docker_deploy_cloud_foundry:
          requires:
            - build_bert_model
            - list_container_vulnerabilities
          filters:
            branches:
              only: main
      - vendor_deploy_cloud_foundry:
          requires:
            - vendor_artifacts
          filters:
            branches:
              only: main