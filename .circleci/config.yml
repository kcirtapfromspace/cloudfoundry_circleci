version: 2.1

orbs:
  pack: buildpacks/pack@0.2.4
  
executors:
  base-executor:
    docker:
      - image: cimg/base:2023.05

jobs:
  paketo_build:
    executor: base-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - buildpacks/build:
          builder: paketobuildpacks/builder:base
          buildpack: paketo-buildpacks/python
          image-file: pybert.tgz
          image-name: pybert
  publish:
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          command: |
            docker load -i /tmp/workspace/images/pybert.tgz
            docker push pybert
  build_bert_model:
    # resource_class: small # specify a resource class
    executor: base-executor
    steps:
      - checkout  
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            export DOCKER_BUILDKIT=1
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            docker build --target final -t ghcr.io/kcirtapfromspace/cloudfoundry_circleci:$TAG -t ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest .
            echo $GITHUB_PAT | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
            docker push ghcr.io/kcirtapfromspace/cloudfoundry_circleci:$TAG 
            docker push ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest


      # - run:
      #     name: Copy vendor folder from Docker image
      #     command: |
      #       export DOCKER_BUILDKIT=1
      #       mkdir -p /tmp/artifacts
      #       TAG="0.1.${CIRCLE_BUILD_NUM}"
      #       docker build --target artifact_build -t artifact_build_image:$TAG .
      #       docker create --name temp-container artifact_build_image:$TAG
      #       docker cp temp-container:/vendor /tmp/artifacts/vendor
      #       docker rm temp-container
      # - persist_to_workspace:
      #     root: /tmp/artifacts
      #     paths:
      #       - vendor
  list_container_vulnerabilities:
    executor: base-executor
    steps:
      - run:
          command: |
            mkdir -p /tmp/artifacts
      - run:
          name: Syft Docker image
          environment:
            SYFT_VERSION: v0.80.0
            IMAGE_NAME: ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest
            OUTPUT_FORMAT: json
            OUTPUT_FILE: /tmp/artifacts/syft_sbom.json
          command: |
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b . "$SYFT_VERSION"
            ./syft packages "$IMAGE_NAME" --scope AllLayers -o "$OUTPUT_FORMAT" > "${OUTPUT_FILE}" 
            echo "scan results saved in $OUTPUT_FILE"
          # echo $GITHUB_PAT | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
          # echo $GITHUB_PAT | ./syft login ghcr.io -u $GITHUB_USERNAME --password-stdin 
      - run:
          name: Grype Docker image
          environment:
            GRYPE_VERSION: v0.61.1
            OUTPUT_FORMAT: sarif
            OUTPUT_FILE: /tmp/artifacts/grype.json
          command: |
            curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b . "$GRYPE_VERSION"
            ./grype sbom:/tmp/artifacts/syft_sbom.json
            echo "scan results saved in $OUTPUT_FILE"
      # - run:
      #     name: Grype Scan SBOM
      #     environment:
      #       GRYPE_VERSION: v0.61.1
      #       IMAGE_NAME: ghcr.io/kcirtapfromspace/cloudfoundry_circleci:0.1.${CIRCLE_BUILD_NUM}
      #       OUTPUT_FORMAT: sarif
      #       OUTPUT_FILE: /tmp/artifacts/grype.json

      #     command: |
      #       curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b . "$GRYPE_VERSION"
      #       ./grype "$IMAGE_NAME"  --scope AllLayers --only-fixed --by-cve --output sarif-o "$OUTPUT_FORMAT" > "${OUTPUT_FILE}"  --debug 
      #       echo "scan results saved in $OUTPUT_FILE"
      - store_artifacts:
          path: /tmp/artifacts

      # - grype/scan-image:
      #     image-name: ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest # grype will pull this image from docker.io, by default, check the scan-image command for more options 
      #     registry-address: ghcr.io
      #     fail-on-severity: high
      #     registry-user: $GITHUB_USERNAME
      #     registry-pass: $GITHUB_PAT

  deploy_cloud_foundry:
    executor: base-executor
    steps:
      - checkout
      - attach_workspace:
          at: src/bert
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Cloud Foundry
          command: |
            # ...first add the Cloud Foundry Foundation public key and package repository to your system
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            # ...then, update your local package index, then finally install the cf CLI
            sudo apt-get update
            sudo apt-get install cf8-cli
      - run:
          name: Login to Cloud Foundry
          command: |
            cf login -a $CF_API -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s $CF_SPACE
      - run:
          name: Docker Deploy to Cloud Foundry
          command: |
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            CF_DOCKER_PASSWORD=$GITHUB_PAT cf push Python_Bert \
              -k 7G \
              -m 5G \
              --docker-image ghcr.io/kcirtapfromspace/cloudfoundry_circleci:latest \
              --docker-username $GITHUB_USERNAME \
              --no-route \
              --no-start 


# Cron job to run every night at UTC (1am EST)\
  # cron_task:
  #   executor: base-executor
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         docker_layer_caching: true
  #     - run:
  #         name: Install Cloud Foundry
  #         command: |
  #           # ...first add the Cloud Foundry Foundation public key and package repository to your system
  #           wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
  #           echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
  #           # ...then, update your local package index, then finally install the cf CLI
  #           sudo apt-get update
  #           sudo apt-get install cf8-cli
  #     - run:
  #         name: Login to Cloud Foundry
  #         command: |
  #           cf login -a $CF_API -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s $CF_SPACE
  #     - run:
  #         name: Deploy to Cloud Foundry
  #         command: |
  #           cf run-task Python_Bert --start-command "python3 cleaned_bert_similarity.py"

      

workflows:
  build_test_and_deploy:
    jobs:
      - build_bert_model
      - list_container_vulnerabilities:
          requires:
            - build_bert_model
          filters:
            branches:
              only: main
      - deploy_cloud_foundry:
          requires:
            - build_bert_model
            - list_container_vulnerabilities
          filters:
            branches:
              only: main
      - paketo_build
      - buildpacks/build:
          builder: heroku/buildpacks:18
          image-name: myimage
      - publish:
          requires:
            - paketo_build
          filters:
            branches:
              only: main